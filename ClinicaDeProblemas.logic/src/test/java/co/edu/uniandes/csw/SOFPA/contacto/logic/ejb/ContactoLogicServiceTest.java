/* ========================================================================
 * Copyright 2014 SOFPA
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 SOFPA

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.SOFPA.contacto.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.SOFPA.contacto.logic.dto.ContactoPageDTO;
import co.edu.uniandes.csw.SOFPA.contacto.logic.dto.ContactoDTO;
import co.edu.uniandes.csw.SOFPA.contacto.logic.api.IContactoLogicService;
import co.edu.uniandes.csw.SOFPA.contacto.persistence.ContactoPersistence;
import co.edu.uniandes.csw.SOFPA.contacto.persistence.api.IContactoPersistence;
import co.edu.uniandes.csw.SOFPA.contacto.persistence.entity.ContactoEntity;
import co.edu.uniandes.csw.SOFPA.contacto.persistence.converter.ContactoConverter;
import static co.edu.uniandes.csw.SOFPA.util._TestUtil.*;

@RunWith(Arquillian.class)
public class ContactoLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(ContactoLogicService.class.getPackage())
				.addPackage(IContactoLogicService.class.getPackage())
				.addPackage(ContactoPersistence.class.getPackage())
				.addPackage(ContactoEntity.class.getPackage())
				.addPackage(IContactoPersistence.class.getPackage())
                .addPackage(ContactoDTO.class.getPackage())
                .addPackage(ContactoConverter.class.getPackage())
                .addPackage(ContactoEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IContactoLogicService contactoLogicService;
	
	@Inject
	private IContactoPersistence contactoPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<ContactoDTO> dtos=contactoPersistence.getContactos();
		for(ContactoDTO dto:dtos){
			contactoPersistence.deleteContacto(dto.getId());
		}
	}

	private List<ContactoDTO> data=new ArrayList<ContactoDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			ContactoDTO pdto=new ContactoDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setObsevacion(generateRandom(String.class));
			pdto.setTema(generateRandom(String.class));
			pdto.setLogin(generateRandom(String.class));
			pdto.setCodigo(generateRandom(Integer.class));
			pdto.setCarrera(generateRandom(String.class));
			pdto=contactoPersistence.createContacto(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createContactoTest(){
		ContactoDTO ldto=new ContactoDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setObsevacion(generateRandom(String.class));
		ldto.setTema(generateRandom(String.class));
		ldto.setLogin(generateRandom(String.class));
		ldto.setCodigo(generateRandom(Integer.class));
		ldto.setCarrera(generateRandom(String.class));
		
		
		ContactoDTO result=contactoLogicService.createContacto(ldto);
		
		Assert.assertNotNull(result);
		
		ContactoDTO pdto=contactoPersistence.getContacto(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getObsevacion(), pdto.getObsevacion());	
		Assert.assertEquals(ldto.getTema(), pdto.getTema());	
		Assert.assertEquals(ldto.getLogin(), pdto.getLogin());	
		Assert.assertEquals(ldto.getCodigo(), pdto.getCodigo());	
		Assert.assertEquals(ldto.getCarrera(), pdto.getCarrera());	
	}
	
	@Test
	public void getContactosTest(){
		List<ContactoDTO> list=contactoLogicService.getContactos();
		Assert.assertEquals(list.size(), data.size());
        for(ContactoDTO ldto:list){
        	boolean found=false;
            for(ContactoDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getContactoTest(){
		ContactoDTO pdto=data.get(0);
		ContactoDTO ldto=contactoLogicService.getContacto(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getObsevacion(), ldto.getObsevacion());
		Assert.assertEquals(pdto.getTema(), ldto.getTema());
		Assert.assertEquals(pdto.getLogin(), ldto.getLogin());
		Assert.assertEquals(pdto.getCodigo(), ldto.getCodigo());
		Assert.assertEquals(pdto.getCarrera(), ldto.getCarrera());
        
	}
	
	@Test
	public void deleteContactoTest(){
		ContactoDTO pdto=data.get(0);
		contactoLogicService.deleteContacto(pdto.getId());
        ContactoDTO deleted=contactoPersistence.getContacto(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateContactoTest(){
		ContactoDTO pdto=data.get(0);
		
		ContactoDTO ldto=new ContactoDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setObsevacion(generateRandom(String.class));
		ldto.setTema(generateRandom(String.class));
		ldto.setLogin(generateRandom(String.class));
		ldto.setCodigo(generateRandom(Integer.class));
		ldto.setCarrera(generateRandom(String.class));
		
		
		contactoLogicService.updateContacto(ldto);
		
		
		ContactoDTO resp=contactoPersistence.getContacto(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getObsevacion(), resp.getObsevacion());	
		Assert.assertEquals(ldto.getTema(), resp.getTema());	
		Assert.assertEquals(ldto.getLogin(), resp.getLogin());	
		Assert.assertEquals(ldto.getCodigo(), resp.getCodigo());	
		Assert.assertEquals(ldto.getCarrera(), resp.getCarrera());	
	}
	
	@Test
	public void getContactoPaginationTest(){
		
		ContactoPageDTO dto1=contactoLogicService.getContactos(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		ContactoPageDTO dto2=contactoLogicService.getContactos(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(ContactoDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(ContactoDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(ContactoDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(ContactoDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        ContactoPageDTO dto3=contactoLogicService.getContactos(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(ContactoDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(ContactoDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}