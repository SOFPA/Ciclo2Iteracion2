/* ========================================================================
 * Copyright 2014 SOFPA
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 SOFPA

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.SOFPA.uti.master.logic.ejb;

import co.edu.uniandes.csw.SOFPA.opinion.logic.dto.OpinionDTO;
import co.edu.uniandes.csw.SOFPA.opinion.persistence.api.IOpinionPersistence;
import co.edu.uniandes.csw.SOFPA.usuario.logic.dto.UsuarioDTO;
import co.edu.uniandes.csw.SOFPA.usuario.persistence.api.IUsuarioPersistence;
import co.edu.uniandes.csw.SOFPA.uti.logic.dto.UTIDTO;
import co.edu.uniandes.csw.SOFPA.uti.master.logic.api._IUTIMasterLogicService;
import co.edu.uniandes.csw.SOFPA.uti.master.logic.dto.UTIMasterDTO;
import co.edu.uniandes.csw.SOFPA.uti.master.persistence.api.IUTIMasterPersistence;
import co.edu.uniandes.csw.SOFPA.uti.master.persistence.entity.UTIopinionEntity;
import co.edu.uniandes.csw.SOFPA.uti.master.persistence.entity.UTIusuarioEntity;
import co.edu.uniandes.csw.SOFPA.uti.persistence.api.IUTIPersistence;
import javax.inject.Inject;

public abstract class _UTIMasterLogicService implements _IUTIMasterLogicService {

    @Inject
    protected IUTIPersistence utiPersistance;
    @Inject
    protected IUTIMasterPersistence utiMasterPersistance;
    @Inject
    protected IOpinionPersistence opinionPersistance;
    @Inject
    protected IUsuarioPersistence usuarioPersistance;

    public UTIMasterDTO createMasterUTI(UTIMasterDTO uti) {
        UTIDTO persistedUTIDTO = utiPersistance.createUTI(uti.getUTIEntity());
        if (uti.getCreateopinion() != null) {
            for (OpinionDTO opinionDTO : uti.getCreateopinion()) {
                OpinionDTO createdOpinionDTO = opinionPersistance.createOpinion(opinionDTO);
                UTIopinionEntity utiOpinionEntity = new UTIopinionEntity(persistedUTIDTO.getId(), createdOpinionDTO.getId());
                utiMasterPersistance.createUTIopinionEntity(utiOpinionEntity);
            }
        }
        if (uti.getCreateusuario() != null) {
            for (UsuarioDTO usuarioDTO : uti.getCreateusuario()) {
                UsuarioDTO createdUsuarioDTO = usuarioPersistance.createUsuario(usuarioDTO);
                UTIusuarioEntity utiUsuarioEntity = new UTIusuarioEntity(persistedUTIDTO.getId(), createdUsuarioDTO.getId());
                utiMasterPersistance.createUTIusuarioEntity(utiUsuarioEntity);
            }
        }
        // update opinion
        if (uti.getUpdateopinion() != null) {
            for (OpinionDTO opinionDTO : uti.getUpdateopinion()) {
                opinionPersistance.updateOpinion(opinionDTO);
                UTIopinionEntity utiOpinionEntity = new UTIopinionEntity(persistedUTIDTO.getId(), opinionDTO.getId());
                utiMasterPersistance.createUTIopinionEntity(utiOpinionEntity);
            }
        }
        // update usuario
        if (uti.getUpdateusuario() != null) {
            for (UsuarioDTO usuarioDTO : uti.getUpdateusuario()) {
                usuarioPersistance.updateUsuario(usuarioDTO);
                UTIusuarioEntity utiUsuarioEntity = new UTIusuarioEntity(persistedUTIDTO.getId(), usuarioDTO.getId());
                utiMasterPersistance.createUTIusuarioEntity(utiUsuarioEntity);
            }
        }
        return uti;
    }

    public UTIMasterDTO getMasterUTI(Long id) {
        return utiMasterPersistance.getUTI(id);
    }

    public void deleteMasterUTI(Long id) {
        utiPersistance.deleteUTI(id);
    }

    public void updateMasterUTI(UTIMasterDTO uti) {
        utiPersistance.updateUTI(uti.getUTIEntity());

        //---- FOR RELATIONSHIP
        // persist new opinion
        if (uti.getCreateopinion() != null) {
            for (OpinionDTO opinionDTO : uti.getCreateopinion()) {
                OpinionDTO createdOpinionDTO = opinionPersistance.createOpinion(opinionDTO);
                UTIopinionEntity utiOpinionEntity = new UTIopinionEntity(uti.getUTIEntity().getId(), createdOpinionDTO.getId());
                utiMasterPersistance.createUTIopinionEntity(utiOpinionEntity);
            }
        }
        // update opinion
        if (uti.getUpdateopinion() != null) {
            for (OpinionDTO opinionDTO : uti.getUpdateopinion()) {
                opinionPersistance.updateOpinion(opinionDTO);
            }
        }
        // delete opinion
        if (uti.getDeleteopinion() != null) {
            for (OpinionDTO opinionDTO : uti.getDeleteopinion()) {
                utiMasterPersistance.deleteUTIopinionEntity(uti.getUTIEntity().getId(), opinionDTO.getId());
                opinionPersistance.deleteOpinion(opinionDTO.getId());
            }
        }
        // delete usuario
        if (uti.getDeleteusuario() != null) {
            for (UsuarioDTO usuarioDTO : uti.getDeleteusuario()) {
                utiMasterPersistance.deleteUTIusuarioEntity(uti.getUTIEntity().getId(), usuarioDTO.getId());
            }
        }
        // persist new usuario
        if (uti.getCreateusuario() != null) {
            for (UsuarioDTO usuarioDTO : uti.getCreateusuario()) {
                UTIusuarioEntity utiUsuarioEntity = new UTIusuarioEntity(uti.getUTIEntity().getId(), usuarioDTO.getId());
                utiMasterPersistance.createUTIusuarioEntity(utiUsuarioEntity);
            }
        }
        // update usuario
        if (uti.getUpdateusuario() != null) {
            for (UsuarioDTO usuarioDTO : uti.getUpdateusuario()) {
                utiMasterPersistance.deleteUTIusuarioEntity(uti.getUTIEntity().getId(), usuarioDTO.getId());
                usuarioPersistance.updateUsuario(usuarioDTO);
                UTIusuarioEntity utiUsuarioEntity = new UTIusuarioEntity(uti.getId(), usuarioDTO.getId());
                utiMasterPersistance.createUTIusuarioEntity(utiUsuarioEntity);
                
            }
        }
    }
}
