/* ========================================================================
 * Copyright 2014 SOFPA
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 SOFPA

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201410152247

*/

package co.edu.uniandes.csw.SOFPA.recurso.master.logic.ejb;

import co.edu.uniandes.csw.SOFPA.comentario.logic.dto.ComentarioDTO;
import co.edu.uniandes.csw.SOFPA.comentario.persistence.api.IComentarioPersistence;
import co.edu.uniandes.csw.SOFPA.recurso.logic.dto.RecursoDTO;
import co.edu.uniandes.csw.SOFPA.recurso.master.logic.api._IRecursoMasterLogicService;
import co.edu.uniandes.csw.SOFPA.recurso.master.logic.dto.RecursoMasterDTO;
import co.edu.uniandes.csw.SOFPA.recurso.master.persistence.api.IRecursoMasterPersistence;
import co.edu.uniandes.csw.SOFPA.recurso.master.persistence.entity.RecursocomentarioEntity;
import co.edu.uniandes.csw.SOFPA.recurso.persistence.api.IRecursoPersistence;
import javax.inject.Inject;

public abstract class _RecursoMasterLogicService implements _IRecursoMasterLogicService {

    @Inject
    protected IRecursoPersistence recursoPersistance;
    @Inject
    protected IRecursoMasterPersistence recursoMasterPersistance;
    @Inject
    protected IComentarioPersistence comentarioPersistance;

    public RecursoMasterDTO createMasterRecurso(RecursoMasterDTO recurso) {
        RecursoDTO persistedRecursoDTO = recursoPersistance.createRecurso(recurso.getRecursoEntity());
        if (recurso.getCreatecomentario() != null) {
            for (ComentarioDTO comentarioDTO : recurso.getCreatecomentario()) {
                ComentarioDTO createdComentarioDTO = comentarioPersistance.createComentario(comentarioDTO);
                RecursocomentarioEntity recursoComentarioEntity = new RecursocomentarioEntity(persistedRecursoDTO.getId(), createdComentarioDTO.getId());
                recursoMasterPersistance.createRecursocomentarioEntity(recursoComentarioEntity);
            }
        }
        // update comentario
        if (recurso.getUpdatecomentario() != null) {
            for (ComentarioDTO comentarioDTO : recurso.getUpdatecomentario()) {
                comentarioPersistance.updateComentario(comentarioDTO);
                RecursocomentarioEntity recursoComentarioEntity = new RecursocomentarioEntity(persistedRecursoDTO.getId(), comentarioDTO.getId());
                recursoMasterPersistance.createRecursocomentarioEntity(recursoComentarioEntity);
            }
        }
        return recurso;
    }

    public RecursoMasterDTO getMasterRecurso(Long id) {
        return recursoMasterPersistance.getRecurso(id);
    }

    public void deleteMasterRecurso(Long id) {
        recursoPersistance.deleteRecurso(id);
    }

    public void updateMasterRecurso(RecursoMasterDTO recurso) {
        recursoPersistance.updateRecurso(recurso.getRecursoEntity());

        //---- FOR RELATIONSHIP
        // persist new comentario
        if (recurso.getCreatecomentario() != null) {
            for (ComentarioDTO comentarioDTO : recurso.getCreatecomentario()) {
                ComentarioDTO createdComentarioDTO = comentarioPersistance.createComentario(comentarioDTO);
                RecursocomentarioEntity recursoComentarioEntity = new RecursocomentarioEntity(recurso.getRecursoEntity().getId(), createdComentarioDTO.getId());
                recursoMasterPersistance.createRecursocomentarioEntity(recursoComentarioEntity);
            }
        }
        // update comentario
        if (recurso.getUpdatecomentario() != null) {
            for (ComentarioDTO comentarioDTO : recurso.getUpdatecomentario()) {
                comentarioPersistance.updateComentario(comentarioDTO);
            }
        }
        // delete comentario
        if (recurso.getDeletecomentario() != null) {
            for (ComentarioDTO comentarioDTO : recurso.getDeletecomentario()) {
                recursoMasterPersistance.deleteRecursocomentarioEntity(recurso.getRecursoEntity().getId(), comentarioDTO.getId());
                comentarioPersistance.deleteComentario(comentarioDTO.getId());
            }
        }
    }
}
